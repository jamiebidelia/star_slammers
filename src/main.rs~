///TOP LEVEL DOC COMMENT.
/*
colors are:

COLOR_BLACK
COLOR_RED
COLOR_GREEN
COLOR_YELLOW
COLOR_BLUE
COLOR_MAGENTA
COLOR_CYAN
COLOR_WHITE
*/





extern crate pancurses;


mod item;
mod creature;
mod action;
mod direction;
mod camera;
mod tile;
mod tile_map;
mod console;
mod input;


fn main()
{
    
    let game_window      = initialize_game();   
    let mut end_game     = false;

    let mut player = creature::Creature::new();
    player.set_name("Avatar Steve".to_string());
    player.set_player_control(true);
    player.set_image('H');
    player.set_x_pos(0);
    player.set_y_pos(0);

    // Creatures on Map contains each creature that is in this area.
    let mut creatures_on_map: Vec<creature::Creature> = Vec::new();
    creatures_on_map.push(player);
    
    // The Console Buffer will hold the messages that we want to display.
    let mut console_buffer : Vec<String> = Vec::new();

    
    // Tile Database holds the definition of each tile we want to use.
    let tile_database = tile::build_tile_database();

    // The Tile Map holds the terrain data for each square on the map.
    let mut tile_map = tile_map::load_map("maps/test.map".to_string(), &tile_database);

    let mut game_camera = camera::Camera::new();
    camera::update_camera(&mut game_camera, &game_window, &creatures_on_map[0], &tile_map);


    
    
    // Game Loop:  Get Input, Process Input, Process All Events.
    while !end_game
    {
	camera::draw_screen(&game_window,
                            &game_camera,
                            &tile_map,
                            &creatures_on_map,
                            &mut console_buffer);	// Draw the Screen.
        
        let game_action = input::process_keyboard(&game_window); // Listen for a key and turn it into actions.
        action::do_action(&game_action,
                          &game_window,
                          &tile_map,
                          &mut creatures_on_map[0],
                          &mut end_game,
                          &mut console_buffer);   // Process the game action.

        camera::update_camera(&mut game_camera, &game_window, &creatures_on_map[0], &tile_map);
        
        std::thread::sleep(std::time::Duration::from_millis(100));
    } // End Game Loop.

    shut_down_game();
} // End Main.

fn initialize_game() -> pancurses::Window
{
    let game_window = pancurses::initscr(); // Create a new window.
    pancurses::cbreak();		    // Allow one-character-at-a-time.
    pancurses::noecho();		    // Suppress echoing of characters.
    game_window.keypad(true);		    // Set Keypad mode.
    game_window.nodelay(false);		    // Set delay mode.
    pancurses::curs_set(0);                 // Disable cursor blinking.
    game_window				    // Return the window we initialized.     
}

fn shut_down_game()
{
    pancurses::use_default_colors();        // Make sure the terminal colors are reset.
    pancurses::endwin();	            // End the window when we are done.
}

fn blow_up()
{
    shut_down_game();                       // Shut down the pancurses window.
    assert!(false);                         // We will now crash the game.
}
